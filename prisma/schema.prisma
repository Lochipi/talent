generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model News {
    id        Int      @id @default(autoincrement())
    title     String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Course {
    id         Int      @id @default(autoincrement())
    title      String
    content    String
    instructor String
    image      String
    enrolled   User[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     String
}

model Event {
    id        Int      @id @default(autoincrement())
    title     String
    content   String
    date      DateTime
    location  String
    image     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Profile {
    id        Int      @id @default(autoincrement())
    firstName String
    lastName  String
    email     String
    phone     String
    bio       String?
    image     String?
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model socialProfile {
    id        Int      @id @default(autoincrement())
    linkedin  String
    github    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model skills {
    id        Int      @id @default(autoincrement())
    skill     String
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model education {
    id        Int      @id @default(autoincrement())
    school    String
    field     String
    gradYear  Int
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model experience {
    id        Int      @id @default(autoincrement())
    company   String
    position  String
    startDate DateTime
    endDate   DateTime
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model resume {
    id        Int      @id @default(autoincrement())
    resume    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String         @id @default(cuid())
    name            String?
    email           String?        @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    profile         Profile?
    socialProfile   socialProfile?
    skills          skills?
    education       education?
    experience      experience?
    resume          resume?
    coursesEnrolled Course[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
